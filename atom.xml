<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>权奥</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-04-01T12:02:07.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>gamblenull</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>sort和sorted的区别</title>
    <link href="http://yoursite.com/2017/09/20/sort%E5%92%8Csorted/"/>
    <id>http://yoursite.com/2017/09/20/sort和sorted/</id>
    <published>2017-09-19T16:00:22.000Z</published>
    <updated>2018-04-01T12:02:07.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h4><hr><p>&emsp;&emsp;上周面试绿盟的测试开发岗的时候，面试官问我对于<code>list</code>来说<code>sort</code>和<code>sorted</code>有什么区别，我之前确实没有研究过，便说我不会，这两天看了点资料还解决了一个问题，在这里记录一下。</p><a id="more"></a><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>x = [<span class="number">3</span>, <span class="number">1</span>, <span class="number">2</span>, <span class="number">4</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x.sort()</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>x</span><br><span class="line">Out[<span class="number">3</span>]: [<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>, <span class="number">4</span>]</span><br></pre></td></tr></table></figure><p>以上的代码简单的说明了<code>sort</code>的用法，调用<code>sort</code>之后会修改原<code>list</code>。来对比着看一下<code>sorted</code>.</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&gt;&gt;&gt; </span>y = [<span class="number">10</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">2</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>sorted(y)</span><br><span class="line">Out[<span class="number">5</span>]: [<span class="number">2</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">10</span>]</span><br><span class="line"><span class="meta">&gt;&gt;&gt; </span>y</span><br><span class="line">Out[<span class="number">6</span>]: [<span class="number">10</span>, <span class="number">7</span>, <span class="number">8</span>, <span class="number">2</span>]</span><br></pre></td></tr></table></figure><p>可以看到<code>sorted</code>并不会修改原’list’,其实是<code>copy</code>了一份，正是因为<code>copy</code>操作一般来说<code>sorted</code>会比<code>sort</code>慢一些。</p><h4 id="0x02"><a href="#0x02" class="headerlink" title="0x02"></a>0x02</h4><hr><h6 id="题目描述"><a href="#题目描述" class="headerlink" title="题目描述"></a>题目描述</h6><p>设有n个正整数，将他们连接成一排，组成一个最大的多位整数。<br>如:n=3时，3个整数13,312,343,连成的最大整数为34331213。<br>如:n=4时,4个整数7,13,4,246连接成的最大整数为7424613。<br>输入描述:<br>有多组测试样例，每组测试样例包含两行，第一行为一个整数N（N&lt;=100），第二行包含N个数(每个数不超过1000，空格分开)。<br>输出描述:<br>每组数据输出一个表示最大的整数。</p><blockquote><p>示例1<br>输入</p></blockquote><p>2<br>12 123<br>4<br>7 13 4 246</p><blockquote><p>输出</p></blockquote><p>12312<br>7424613</p><hr><p><a href="https://www.nowcoder.com/practice/a6a656249f404eb498d16b2f8eaa2c60?tpId=85&amp;tqId=29898&amp;tPage=4&amp;rp=4&amp;ru=/ta/2017test&amp;qru=/ta/2017test/question-ranking" target="_blank" rel="noopener">牛客网题目地址</a></p><hr><p>解决上述问题，python只需要四行代码。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">n = raw_input()</span><br><span class="line">x = raw_input().split(<span class="string">' '</span>)</span><br><span class="line">x.sort(cmp=<span class="keyword">lambda</span> x,y:cmp(x+y, y+x), reverse=<span class="keyword">True</span>)</span><br><span class="line"><span class="keyword">print</span> <span class="string">""</span>.join(x)</span><br></pre></td></tr></table></figure><p>其实就是用到了<code>sort</code>中的<code>cmp</code>参数可以自定义比较函数，在就是<code>reverse</code>参数设为<code>True</code>降序排列。</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x01&quot;&gt;&lt;a href=&quot;#0x01&quot; class=&quot;headerlink&quot; title=&quot;0x01&quot;&gt;&lt;/a&gt;0x01&lt;/h4&gt;&lt;hr&gt;

&lt;p&gt;&amp;emsp;&amp;emsp;上周面试绿盟的测试开发岗的时候，面试官问我对于&lt;code&gt;list&lt;/code&gt;来说&lt;code&gt;sort&lt;/code&gt;和&lt;code&gt;sorted&lt;/code&gt;有什么区别，我之前确实没有研究过，便说我不会，这两天看了点资料还解决了一个问题，在这里记录一下。&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>markdown小技巧</title>
    <link href="http://yoursite.com/2017/09/03/markdown%E5%B0%8F%E6%8A%80%E5%B7%A7/"/>
    <id>http://yoursite.com/2017/09/03/markdown小技巧/</id>
    <published>2017-09-03T14:29:16.000Z</published>
    <updated>2018-04-01T12:02:53.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x01-前言"><a href="#0x01-前言" class="headerlink" title="0x01 前言"></a>0x01 前言</h4><p>&emsp;&emsp;前段时间用markdown为实习项目写了项目文档，用到了一些markdown的小技巧，在这里做一个记录。</p><a id="more"></a><h4 id="0x02-自动生成目录-table-of-content"><a href="#0x02-自动生成目录-table-of-content" class="headerlink" title="0x02 自动生成目录(table of content)"></a>0x02 自动生成目录(table of content)</h4><p>&emsp;&emsp;在任何你想生成目录的地方输入<code>[toc]</code>，你会惊奇的发现markdown为你的md文件生成目录，更令人惊喜的是生成的目录会随着你的修改自动更新，在导出为PDF文件之后可以通过点击目录跳转到对应的部分。</p><h4 id="0x03-居中显示文字和图片"><a href="#0x03-居中显示文字和图片" class="headerlink" title="0x03 居中显示文字和图片"></a>0x03 居中显示文字和图片</h4><p>&emsp;&emsp;通常情况下markdown中的文字是左对齐的，但是如果我们想让文字居中又该怎么办呢？我们知道markdown文件中是可以插入HTML代码的，所以我们可以用HTML的代码让文字居中。</p><p><code>&lt;center&gt;center标签&lt;/center&gt;</code></p><p><code>&lt;h4 align=&quot;center&quot;&gt;h4标签&lt;h4&gt;</code></p><p><code>&lt;p align=&quot;center&quot;&gt;p标签&lt;p&gt;</code></p><p>&emsp;&emsp;同理图片居中也可以通过类似的方式来完成</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;div align=center&gt;</span><br><span class="line">&lt;img width=&quot;100px&quot; src=&quot;https://ws1.sinaimg.cn/large/005NqTFYgy1fj6rx1cg21j30u01hcacd.jpg&quot;&gt;</span><br><span class="line">    &lt;/img&gt;</span><br><span class="line">&lt;/div&gt;</span><br></pre></td></tr></table></figure><p>&emsp;&emsp;效果如下所示</p><div align="center"><br>    <img width="100px" src="https://ws1.sinaimg.cn/large/005NqTFYgy1fj6rx1cg21j30u01hcacd.jpg"><br>    <br></div><p>你当然可以更改align的方向，或者任意设置width，height等属性，HTML代码能带给你比<code>![]()</code>更高的灵活性。</p><h4 id="0x04-首行缩进与强制换行"><a href="#0x04-首行缩进与强制换行" class="headerlink" title="0x04 首行缩进与强制换行"></a>0x04 首行缩进与强制换行</h4><p>&emsp;&emsp;以前写markdown的时候，不知道markdown其实是可以实现首行缩进的… 前面说到markdown中可以嵌套HTML，这里实现首行缩进的就是使用<code>&amp;emsp;&amp;emsp;</code>HTML转义字符来实现的。换行可以通过<code>&lt;br&gt;</code>标签实现。</p><h4 id="0x05-任务列表"><a href="#0x05-任务列表" class="headerlink" title="0x05 任务列表"></a>0x05 任务列表</h4><p>&emsp;&emsp;初学markdown的时候肯定会接触到列表的语法使用<code>-</code>来生成无序列表，<code>1.</code>来生成有序列表。</p><ul><li>无序列表1</li><li>无序列表2</li><li>无序列表3</li></ul><ol><li>有序列表1</li><li>有序列表2</li><li>有序列表3</li></ol><p>&emsp;&emsp;其实还有一种列表叫任务列表</p><ul><li style="list-style: none"><input type="checkbox"> 写好文档</li><li style="list-style: none"><input type="checkbox"> 洗衣服</li><li style="list-style: none"><input type="checkbox" checked> 买水果</li></ul><p>以上效果的markdown代码为，可以在Github等网站使用</p><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>[ ] 写好文档</span><br><span class="line"><span class="bullet">- </span>[ ] 洗衣服</span><br><span class="line"><span class="bullet">- </span>[x] 买水果</span><br></pre></td></tr></table></figure><h4 id="0x06-diff语法"><a href="#0x06-diff语法" class="headerlink" title="0x06 diff语法"></a>0x06 diff语法</h4><figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="addition">+ 新增</span></span><br><span class="line"><span class="deletion">- 删除</span></span><br></pre></td></tr></table></figure><p>diff语法可以用在需要展示代码或者版本变更的地方</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;0x01-前言&quot;&gt;&lt;a href=&quot;#0x01-前言&quot; class=&quot;headerlink&quot; title=&quot;0x01 前言&quot;&gt;&lt;/a&gt;0x01 前言&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;前段时间用markdown为实习项目写了项目文档，用到了一些markdown的小技巧，在这里做一个记录。&lt;/p&gt;
    
    </summary>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>字典写入csv文件中出现多余空行的解决办法</title>
    <link href="http://yoursite.com/2017/07/23/%E5%AD%97%E5%85%B8%E5%86%99%E5%85%A5csv%E6%96%87%E4%BB%B6%E4%B8%AD%E5%87%BA%E7%8E%B0%E5%A4%9A%E4%BD%99%E7%A9%BA%E8%A1%8C%E7%9A%84%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://yoursite.com/2017/07/23/字典写入csv文件中出现多余空行的解决办法/</id>
    <published>2017-07-23T07:17:52.000Z</published>
    <updated>2018-04-01T10:37:19.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="0x01"><a href="#0x01" class="headerlink" title="0x01"></a>0x01</h4><p>来源是实验楼的一道题目 <a href="https://www.shiyanlou.com/challenges/2956" target="_blank" rel="noopener">https://www.shiyanlou.com/challenges/2956</a> ，题目要求将json格式转换为csv格式。</p><h5 id="CSV格式要求："><a href="#CSV格式要求：" class="headerlink" title="CSV格式要求："></a>CSV格式要求：</h5><ol><li>分隔符为英文半角逗号 , 。</li><li>必须包含列名，列名须在文件第一行。</li><li>所有列名和字段值都必须被英文半角双引号 “ 包围。</li><li>列名的顺序依次为：<br>“IP”,”Status”,”Time”,”HttpReferer”,”HttpUserAgent”,”Request”,”HttpXForwardedFor”,”BodyBytesSent”,”RemoteUser”,”RequestLength”</li></ol><h4 id="0x02-编码实现"><a href="#0x02-编码实现" class="headerlink" title="0x02 编码实现"></a>0x02 编码实现</h4><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#-*- coding:utf-8 -*-</span></span><br><span class="line"><span class="keyword">import</span> csv</span><br><span class="line"><span class="keyword">import</span> ujson <span class="comment"># 比json略块一些</span></span><br><span class="line"></span><br><span class="line">f_json = open(<span class="string">"web_access.json"</span>, <span class="string">"rb"</span>)</span><br><span class="line"><span class="comment"># 产生空行的原因 默认的行分隔符是'\r\n'</span></span><br><span class="line"><span class="comment"># 以二进制的方式写入文件不会出现多余的空行</span></span><br><span class="line"><span class="comment"># 如果是python3 不能用wb参数，使用newline=''解决</span></span><br><span class="line">f_csv = open(<span class="string">"csv_access.csv"</span>, <span class="string">"wb"</span>)</span><br><span class="line"></span><br><span class="line">f_dict = ujson.load(f_json)</span><br><span class="line">fieldnames = [<span class="string">"IP"</span>,<span class="string">"Status"</span>,<span class="string">"Time"</span>,<span class="string">"HttpReferer"</span>,<span class="string">"HttpUserAgent"</span>,<span class="string">"Request"</span>,<span class="string">"HttpXForwardedFor"</span>,<span class="string">"BodyBytesSent"</span>,<span class="string">"RemoteUser"</span>,<span class="string">"RequestLength"</span>]</span><br><span class="line">dict_writer = csv.DictWriter(f_csv, fieldnames=fieldnames, quoting=csv.QUOTE_ALL)</span><br><span class="line">dict_writer.writeheader()</span><br><span class="line">dict_writer.writerows(f_dict)</span><br><span class="line"></span><br><span class="line">f_json.close()</span><br><span class="line">f_csv.close()</span><br></pre></td></tr></table></figure><h4 id="0x03-代码解释"><a href="#0x03-代码解释" class="headerlink" title="0x03 代码解释"></a>0x03 代码解释</h4><ol><li>思路: json -&gt; dict -&gt; csv</li><li>dict_writer.writeheader() 为CSV文件添加首部行</li><li>quoting=csv.QUOTE_ALL 实现要求3</li><li>写入csv文件后发现空行问题  如下图所示<br></li></ol>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h4 id=&quot;0x01&quot;&gt;&lt;a href=&quot;#0x01&quot; class=&quot;headerlink&quot; title=&quot;0x01&quot;&gt;&lt;/a&gt;0x01&lt;/h4&gt;&lt;p&gt;来源是实验楼的一道题目 &lt;a href=&quot;https://www.shiyanlou.com/challenges/2956
      
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
      <category term="csv" scheme="http://yoursite.com/tags/csv/"/>
    
  </entry>
  
  <entry>
    <title>Numpy基础</title>
    <link href="http://yoursite.com/2017/07/17/Numpy%E5%9F%BA%E7%A1%80/"/>
    <id>http://yoursite.com/2017/07/17/Numpy基础/</id>
    <published>2017-07-17T12:04:27.000Z</published>
    <updated>2018-04-01T12:02:25.000Z</updated>
    
    <content type="html"><![CDATA[<p>1.数组创建<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line">import numpy as np</span><br><span class="line">arr = np.array([2,6,5,9], float) # array函数参数格式(list, type)</span><br><span class="line">type(arr) # array</span><br><span class="line">arr.tolist() # array转list</span><br><span class="line"># 随机创建数组</span><br><span class="line">np.random.permutation(length)</span><br><span class="line">np.random.normal(0,1,5) # 参数分别为正态分布的均值，标准差，数组的长度</span><br><span class="line">np.random.random(5) # 均匀分布，random函数将返回0-1之间的数字</span><br><span class="line"># 创建矩阵</span><br><span class="line">np.identify(5, dtype=float) # 单位矩阵</span><br><span class="line">np.eye(5, dtype=float) # 对角线全为1的矩阵 可以通过设置k来指定是那一条对角线</span><br><span class="line">array([[ 1.,  0.,  0.,  0.,  0.],</span><br><span class="line">       [ 0.,  1.,  0.,  0.,  0.],</span><br><span class="line">       [ 0.,  0.,  1.,  0.,  0.],</span><br><span class="line">       [ 0.,  0.,  0.,  1.,  0.],</span><br><span class="line">       [ 0.,  0.,  0.,  0.,  1.]])</span><br><span class="line">例 np.eye(5, k=2, dtype=float)</span><br><span class="line">array([[ 0.,  0.,  1.,  0.,  0.],</span><br><span class="line">       [ 0.,  0.,  0.,  1.,  0.],</span><br><span class="line">       [ 0.,  0.,  0.,  0.,  1.],</span><br><span class="line">       [ 0.,  0.,  0.,  0.,  0.],</span><br><span class="line">       [ 0.,  0.,  0.,  0.,  0.]])</span><br><span class="line">np.zeros((2,3), dtype=float) # 创建全0矩阵，矩阵的维数用tuple传参</span><br><span class="line">array([[ 0.,  0.,  0.],</span><br><span class="line">       [ 0.,  0.,  0.]])</span><br><span class="line">np.ones((3,2), dtype=float)  # 创建全1矩阵</span><br><span class="line">array([[ 1.,  1.],</span><br><span class="line">       [ 1.,  1.],</span><br><span class="line">       [ 1.,  1.]])</span><br><span class="line">arr = np.array([[13,32,31],[64,25,76]], dtype=float)</span><br><span class="line">np.zeros_like(arr) # 创建与array维数相同的全0矩阵</span><br><span class="line">array([[ 0., 0., 0.],</span><br><span class="line">       [ 0., 0., 0.]])</span><br><span class="line">np.ones_like(arr)  # 创建与array维数相同的全1矩阵</span><br><span class="line">array([[ 1., 1., 1.],</span><br><span class="line">       [ 1., 1., 1.]])</span><br><span class="line"></span><br><span class="line"># vstack函数</span><br><span class="line">arr1 = np.array([1,3,2])</span><br><span class="line">arr2 = np.array([3,4,6])</span><br><span class="line">np.vstack([arr1,arr2])</span><br><span class="line">array([[1, 3, 2],</span><br><span class="line">      [3, 4, 6]])</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>2.数组的操作<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br></pre></td><td class="code"><pre><span class="line"># unique函数</span><br><span class="line">arr = np.array([3, 4, 5, 3, 5])</span><br><span class="line">np.unique(arr)</span><br><span class="line">返回: array([3, 4, 5])</span><br><span class="line"># sort函数和argsort函数</span><br><span class="line">np.sort(arr)</span><br><span class="line">返回： array([3,3,4,5,5])</span><br><span class="line">np.argsort(arr)</span><br><span class="line">返回： array([0,3,1,2,4]) # 返回的是array的索引</span><br><span class="line"># shuffle函数 随机排列</span><br><span class="line">np.random.shuffle(arr)</span><br><span class="line"># array_equal函数比较两个数组是否相等</span><br><span class="line">np.array_equal(arr, np.array([1,3,2]))</span><br><span class="line"># flatten函数 将多维数组变为一维数组</span><br><span class="line">arr = np.array([[10, 29, 23], [24, 25, 46]], dtype=float)</span><br><span class="line">arr.flatten()</span><br><span class="line">返回：array([ 10.,  29.,  23.,  24.,  25.,  46.])</span><br><span class="line"># shape和dtype</span><br><span class="line">arr.shape 得到数组的大小</span><br><span class="line">(2,3)</span><br><span class="line">arr.dtype 返回数组元素的类型</span><br><span class="line">dtype(&apos;float64&apos;)</span><br><span class="line">用astype函数转换数组元素的类型</span><br><span class="line">int_arr = arr.astype(np.int32)</span><br><span class="line"># reshape函数</span><br><span class="line">arr = arr.reshape((3,2))</span><br><span class="line">array([[ 10.,  29.],</span><br><span class="line">       [ 23.,  24.],</span><br><span class="line">       [ 25.,  46.]])</span><br><span class="line"># transpose函数 矩阵转置函数 或者.T</span><br><span class="line">arr = np.array([[0, 1, 2], [3 ,4 ,5]], dtype=float)</span><br><span class="line">arr.transpose()</span><br><span class="line">array([</span><br><span class="line">[0, 3],</span><br><span class="line">[1, 4],</span><br><span class="line">[2, 5]])</span><br><span class="line"></span><br><span class="line"># 数组的连接操作用concatenate函数</span><br><span class="line">arr1 = np.array([10,22], float)</span><br><span class="line">arr2 = np.array([31,43,54,61], float)</span><br><span class="line">arr3 = np.array([71,82,29], float)</span><br><span class="line">np.concatenate((arr1, arr2, arr3))</span><br><span class="line">array([ 10., 22., 31., 43., 54., 61., 71., 82., 29.])</span><br><span class="line">多维数组的需指定沿哪条轴链接，Numpy默认沿着第一条轴连接</span><br><span class="line">arr1 = np.array([[11, 12], [32, 42]], float)</span><br><span class="line">arr2 = np.array([[54, 26], [27, 28]], float)</span><br><span class="line">np.concatenate((arr1, arr2))</span><br><span class="line">array([</span><br><span class="line">[11, 12],</span><br><span class="line">    [32, 42],</span><br><span class="line">    [54, 26],</span><br><span class="line">    [27, 28]])</span><br><span class="line">np.concatenate((arr1, arr2), axis=1)</span><br><span class="line">array([</span><br><span class="line">[11, 12, 32, 42],</span><br><span class="line">    [54, 26, 27, 28]])</span><br><span class="line"># 数组转二进制字符串 tostring和fromstring</span><br><span class="line">str = arr.tostring()</span><br><span class="line">&gt;&gt;&gt; str</span><br><span class="line">&apos;\x00\x00\x00\x00\x00\x00$@\x00\x00\x00\x00\x00\x004@\x00\x00\x00\x00\</span><br><span class="line">x00\x00&gt;@&apos;</span><br><span class="line">np.fromstring(str)</span><br><span class="line">&gt;&gt;&gt; array([10, 20, 30])</span><br><span class="line"></span><br><span class="line"># 相同大小的数组的加减乘除</span><br><span class="line">arr1 + arr2</span><br><span class="line">arr1 - arr2</span><br><span class="line">arr1 * arr2</span><br><span class="line">arr1 % arr2</span><br><span class="line">arr1 ** arr2</span><br><span class="line"></span><br><span class="line"># 广播：不同大小的array参与运算，维度少的数组将多次重复自身，直到与另一个数组维度相同</span><br><span class="line">arr1 = np.array([[1, 2], [3, 4], [5, 6]], float)</span><br><span class="line">arr2 = np.array([1, 2], float)</span><br><span class="line">&gt;&gt;&gt; arr1 + arr2</span><br><span class="line">array([</span><br><span class="line">[2, 4],</span><br><span class="line">    [4, 6]</span><br><span class="line">    [6, 8]])</span><br><span class="line">这里arr2重复自身成了</span><br><span class="line">array([</span><br><span class="line">[1, 2],</span><br><span class="line">    [1, 2],</span><br><span class="line">    [1, 2]])</span><br><span class="line"></span><br><span class="line"># 用bool数组过滤数组元素</span><br><span class="line">arr = np.array([[1, 2], [5, 9]], float)</span><br><span class="line">arr[arr &gt;= 7]</span><br><span class="line">array([9.])</span><br><span class="line">arr[np.logical_and(arr &gt;5, arr &lt; 11)]</span><br><span class="line"></span><br><span class="line">&gt;&gt;&gt; arr1 = np.array([1, 4, 5, 9], float)</span><br><span class="line">&gt;&gt;&gt; arr2 = np.array([0, 1, 1, 3, 1, 1, 1], int)</span><br><span class="line">&gt;&gt;&gt; arr1[arr2]</span><br><span class="line">array([ 1., 4., 4., 9., 4., 4., 4.])</span><br><span class="line">arr2表示选择arr1中的第零个元素，第一个元素，第一个元素，第三个元素，第一个元素，第一个元素，第一个元素。</span><br><span class="line"></span><br><span class="line"># 多维度数组的选取操作</span><br><span class="line">arr1 = np.array([[1, 2], [5, 13]], float)</span><br><span class="line">arr2 = np.array([1, 0, 0, 1], int)</span><br><span class="line">arr3 = np.array([1, 1, 0, 1], int)</span><br><span class="line">arr1[arr2,arr3]</span><br><span class="line">array([ 13., 2., 1., 13.])</span><br><span class="line"></span><br><span class="line"># take函数和put函数</span><br><span class="line">take 以一个整数数组做参数表示索引，从另一个数组选取相应的元素</span><br><span class="line">arr1 = np.array([[10, 21], [62, 33]], float)</span><br><span class="line">arr2 = np.array([0, 0, 1], int)</span><br><span class="line">arr1.take(arr2, axis=0)</span><br><span class="line">array([[ 10., 21.],</span><br><span class="line">       [ 10., 21.],</span><br><span class="line">       [ 62., 33.]])</span><br><span class="line"></span><br><span class="line">arr1.take(arr2, axis=1) # 指定轴向</span><br><span class="line">array([[ 10., 10., 21.],</span><br><span class="line">       [ 62., 62., 33.]])</span><br><span class="line"></span><br><span class="line">put 是take的逆操作，它的两个参数一个是要被放到的位置，一个是被投放元素来自那个array</span><br><span class="line">arr1 = np.array([2, 1, 6, 2, 1, 9], float)</span><br><span class="line">arr2 = np.array([3, 10, 2], float)</span><br><span class="line">arr1.put([1, 4], arr2)</span><br><span class="line">arr1</span><br><span class="line">array([ 2., 3., 6., 2., 10., 9.])</span><br></pre></td></tr></table></figure></p><p>3.线性代数<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"># np.dot() 计算点积</span><br><span class="line">X = np.arange(15).reshape((3, 5))</span><br><span class="line">np.dot(X, X.T)</span><br><span class="line">np.outer()</span><br><span class="line">np.inner() # 内积</span><br><span class="line">np.cross() # 叉乘</span><br><span class="line"># np.linalg.det() 计算行列式的值</span><br><span class="line">matrix = np.array([[74, 22, 10], [92, 31, 17], [21, 22, 12]], float)</span><br><span class="line">np.linalg.det(matrix)</span><br><span class="line"># np.linalg.inv() 逆矩阵</span><br><span class="line">inv_matrix = np.linalg.inv(matrix)</span><br><span class="line">np.dot(inv_matrix, matrix)</span><br><span class="line"># 计算矩阵的特征值和特征向量</span><br><span class="line">vals, vecs = np.linalg.eig(matrix)</span><br></pre></td></tr></table></figure></p><p>4.统计<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">arr.mean() 均值</span><br><span class="line">arr.std()  标准差</span><br><span class="line">arr.var()  方差</span><br><span class="line">arr.min()  最小值</span><br><span class="line">arr.max()  最大值</span><br><span class="line">arr.argmin() 最小值的索引</span><br><span class="line">arr.argmax() 最大值的索引</span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1.数组创建&lt;br&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;8&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;9&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;10&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;11&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;12&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;13&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;14&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;15&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;16&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;17&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;18&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;19&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;20&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;21&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;22&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;23&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;24&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;25&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;26&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;27&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;28&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;29&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;30&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;31&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;32&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;33&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;34&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;35&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;36&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;37&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;38&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;39&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;40&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;41&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;42&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;43&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;import numpy as np&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr = np.array([2,6,5,9], float) # array函数参数格式(list, type)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;type(arr) # array&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr.tolist() # array转list&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 随机创建数组&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np.random.permutation(length)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np.random.normal(0,1,5) # 参数分别为正态分布的均值，标准差，数组的长度&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np.random.random(5) # 均匀分布，random函数将返回0-1之间的数字&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# 创建矩阵&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np.identify(5, dtype=float) # 单位矩阵&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np.eye(5, dtype=float) # 对角线全为1的矩阵 可以通过设置k来指定是那一条对角线&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array([[ 1.,  0.,  0.,  0.,  0.],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [ 0.,  1.,  0.,  0.,  0.],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [ 0.,  0.,  1.,  0.,  0.],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [ 0.,  0.,  0.,  1.,  0.],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [ 0.,  0.,  0.,  0.,  1.]])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;例 np.eye(5, k=2, dtype=float)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array([[ 0.,  0.,  1.,  0.,  0.],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [ 0.,  0.,  0.,  1.,  0.],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [ 0.,  0.,  0.,  0.,  1.],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [ 0.,  0.,  0.,  0.,  0.],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [ 0.,  0.,  0.,  0.,  0.]])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np.zeros((2,3), dtype=float) # 创建全0矩阵，矩阵的维数用tuple传参&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array([[ 0.,  0.,  0.],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [ 0.,  0.,  0.]])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np.ones((3,2), dtype=float)  # 创建全1矩阵&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array([[ 1.,  1.],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [ 1.,  1.],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [ 1.,  1.]])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr = np.array([[13,32,31],[64,25,76]], dtype=float)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np.zeros_like(arr) # 创建与array维数相同的全0矩阵&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array([[ 0., 0., 0.],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [ 0., 0., 0.]])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np.ones_like(arr)  # 创建与array维数相同的全1矩阵&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array([[ 1., 1., 1.],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;       [ 1., 1., 1.]])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;# vstack函数&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr1 = np.array([1,3,2])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;arr2 = np.array([3,4,6])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;np.vstack([arr1,arr2])&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;array([[1, 3, 2],&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;      [3, 4, 6]])&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
      <category term="python" scheme="http://yoursite.com/tags/python/"/>
    
  </entry>
  
  <entry>
    <title>为博客添加Let&#39;s Encrypt的HTTPS证书</title>
    <link href="http://yoursite.com/2017/07/16/%E4%B8%BA%E5%8D%9A%E5%AE%A2%E6%B7%BB%E5%8A%A0Let-s-Encrypt%E7%9A%84HTTPS%E8%AF%81%E4%B9%A6/"/>
    <id>http://yoursite.com/2017/07/16/为博客添加Let-s-Encrypt的HTTPS证书/</id>
    <published>2017-07-16T13:44:37.000Z</published>
    <updated>2018-04-01T10:37:19.000Z</updated>
    
    <content type="html"><![CDATA[<p>cerbot地址: <code>https://certbot.eff.org</code><br>直接在网页上选择你所使用的web服务器和服务器的操作系统就好，certbot的文档也很全，照着敲就好了。<br>我用的是Ubuntu 14.04, web服务器是nginx</p><h5 id="通过PPA下载certbot"><a href="#通过PPA下载certbot" class="headerlink" title="通过PPA下载certbot"></a>通过PPA下载certbot</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install software-properties-common</span><br><span class="line">sudo add-apt-repository ppa:certbot/certbot</span><br><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install python-certbot-nginx</span><br></pre></td></tr></table></figure><h5 id="certbot自动安装证书，修改Nginx配置"><a href="#certbot自动安装证书，修改Nginx配置" class="headerlink" title="certbot自动安装证书，修改Nginx配置"></a>certbot自动安装证书，修改Nginx配置</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sudo certbot --nginx <span class="comment"># 根据提示添加证书</span></span><br></pre></td></tr></table></figure><p>如果你希望Nginx把HTTP请求重定向到HTTPS，需要去掉certbot添加的重定向规则的注释。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"># Redirect non-https traffic to https</span><br><span class="line">if ($scheme != &quot;https&quot;) &#123;</span><br><span class="line">   return 301 https://$host$request_uri;</span><br><span class="line">&#125; # managed by Certbot</span><br></pre></td></tr></table></figure></p><h5 id="设置crontab任务定时更新证书"><a href="#设置crontab任务定时更新证书" class="headerlink" title="设置crontab任务定时更新证书"></a>设置crontab任务定时更新证书</h5><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">crontab -e</span><br><span class="line"><span class="comment"># 设置每月更新一次</span></span><br><span class="line"><span class="comment"># certbot</span></span><br><span class="line">0 0 1 * * certbot renew</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;cerbot地址: &lt;code&gt;https://certbot.eff.org&lt;/code&gt;&lt;br&gt;直接在网页上选择你所使用的web服务器和服务器的操作系统就好，certbot的文档也很全，照着敲就好了。&lt;br&gt;我用的是Ubuntu 14.04, web服务器是nginx&lt;
      
    
    </summary>
    
    
      <category term="VPS" scheme="http://yoursite.com/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>搬瓦工VPS安装shadowsocks</title>
    <link href="http://yoursite.com/2017/07/16/%E6%90%AC%E7%93%A6%E5%B7%A5VPS%E5%AE%89%E8%A3%85shadowsocks/"/>
    <id>http://yoursite.com/2017/07/16/搬瓦工VPS安装shadowsocks/</id>
    <published>2017-07-16T12:16:24.000Z</published>
    <updated>2018-04-01T12:03:16.000Z</updated>
    
    <content type="html"><![CDATA[<p>如果是搬瓦工默认的操作系统CentOS的话，可以一键安装shadowsock，但是CentOS的包都太老了，连shadowsocks的Client都是很老的版本，所以还是装上了Ubuntu 14.04，得益于我在Ubuntu上装了Anaconda，安装shadowsock就几行命令。</p><a id="more"></a><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">pip install shadowsocks</span><br><span class="line">sudo vim /etc/shadowsocks.json</span><br></pre></td></tr></table></figure><p>填入shadowsocks的配置信息<br><figure class="highlight json"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">   <span class="attr">"server"</span>:<span class="string">"67.209.***.***"</span>,</span><br><span class="line">   <span class="attr">"server_port"</span>:<span class="number">8388</span>,</span><br><span class="line">   <span class="attr">"local_address"</span>: <span class="string">"127.0.0.1"</span>,</span><br><span class="line">   <span class="attr">"local_port"</span>:<span class="number">1080</span>,</span><br><span class="line">   <span class="attr">"password"</span>:<span class="string">"password"</span>,</span><br><span class="line">   <span class="attr">"timeout"</span>:<span class="number">600</span>,</span><br><span class="line">   <span class="attr">"method"</span>:<span class="string">"aes-256-cfb"</span>,</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>启动shadowsocks<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssserver -c /etc/shadowsocks.json -d start</span><br></pre></td></tr></table></figure></p><p>在shadowsocks的官网上给出了一些优化<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">vi /etc/security/limits.conf</span><br><span class="line"><span class="comment"># 加入如下两行到上述文件中</span></span><br><span class="line">* soft nofile 51200</span><br><span class="line">* hard nofile 51200</span><br><span class="line"><span class="built_in">ulimit</span> -n 51200</span><br></pre></td></tr></table></figure></p><p>调整内核参数<br><code>sudo vim /etc/sysctl.conf</code><br>加入如下内容<br><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><span class="line">fs.file-max = 51200</span><br><span class="line"></span><br><span class="line">net.core.rmem_max = 67108864</span><br><span class="line">net.core.wmem_max = 67108864</span><br><span class="line">net.core.netdev_max_backlog = 250000</span><br><span class="line">net.core.somaxconn = 4096</span><br><span class="line"></span><br><span class="line">net.ipv4.tcp_syncookies = 1</span><br><span class="line">net.ipv4.tcp_tw_reuse = 1</span><br><span class="line">net.ipv4.tcp_tw_recycle = 0</span><br><span class="line">net.ipv4.tcp_fin_timeout = 30</span><br><span class="line">net.ipv4.tcp_keepalive_time = 1200</span><br><span class="line">net.ipv4.ip_local_port_range = 10000 65000</span><br><span class="line">net.ipv4.tcp_max_syn_backlog = 8192</span><br><span class="line">net.ipv4.tcp_max_tw_buckets = 5000</span><br><span class="line">net.ipv4.tcp_fastopen = 3</span><br><span class="line">net.ipv4.tcp_mem = 25600 51200 102400</span><br><span class="line">net.ipv4.tcp_rmem = 4096 87380 67108864</span><br><span class="line">net.ipv4.tcp_wmem = 4096 65536 67108864</span><br><span class="line">net.ipv4.tcp_mtu_probing = 1</span><br><span class="line">net.ipv4.tcp_congestion_control = hybla</span><br></pre></td></tr></table></figure></p><p><code>sysctl -p</code> 使设置生效</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;如果是搬瓦工默认的操作系统CentOS的话，可以一键安装shadowsock，但是CentOS的包都太老了，连shadowsocks的Client都是很老的版本，所以还是装上了Ubuntu 14.04，得益于我在Ubuntu上装了Anaconda，安装shadowsock就几行命令。&lt;/p&gt;
    
    </summary>
    
    
      <category term="VPS" scheme="http://yoursite.com/tags/VPS/"/>
    
  </entry>
  
  <entry>
    <title>搬瓦工VPS部署Hexo博客</title>
    <link href="http://yoursite.com/2017/07/16/%E6%90%AC%E7%93%A6%E5%B7%A5VPS%E9%83%A8%E7%BD%B2Hexo%E5%8D%9A%E5%AE%A2/"/>
    <id>http://yoursite.com/2017/07/16/搬瓦工VPS部署Hexo博客/</id>
    <published>2017-07-16T11:08:09.000Z</published>
    <updated>2018-04-01T12:03:51.000Z</updated>
    
    <content type="html"><![CDATA[<h4 id="在ubuntu上安装Git，Node-js和Nginx"><a href="#在ubuntu上安装Git，Node-js和Nginx" class="headerlink" title="在ubuntu上安装Git，Node.js和Nginx"></a>在ubuntu上安装Git，Node.js和Nginx</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sudo apt-get update</span><br><span class="line">sudo apt-get install build-essential</span><br><span class="line">sudo apt-get install git</span><br><span class="line">sudo apt-get innstall nginx</span><br></pre></td></tr></table></figure><a id="more"></a><p>用apt-get install下载的node版本较低，我用源码来安装node。<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">wget https://nodejs.org/dist/v6.11.1/node-v6.11.1.tar.gz</span><br><span class="line">tar -zxvf node-v6.11.1.tar.gz</span><br><span class="line">cd node-v6.11.1</span><br><span class="line">sudo ./configure</span><br><span class="line">sudo make</span><br><span class="line">sudo make install</span><br></pre></td></tr></table></figure></p><h4 id="创建git用户"><a href="#创建git用户" class="headerlink" title="创建git用户"></a>创建git用户</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">addsuer git</span><br><span class="line">chmod 740 /etc/sudoers</span><br><span class="line">sudo vim /etc/sudoers</span><br></pre></td></tr></table></figure><p>添加上git用户的权限<br><code>git ALL=(ALL:ALL) ALL</code><br>还原文件权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">chmod 440 /etc/sudoers</span><br></pre></td></tr></table></figure></p><p>为git用户添加访问nginx文件目录的权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">cd /var/www</span><br><span class="line">sudo mkdir hexo</span><br><span class="line">sudo chown git:git -R /var/www/hexo</span><br></pre></td></tr></table></figure></p><h4 id="配置免密登陆VPS"><a href="#配置免密登陆VPS" class="headerlink" title="配置免密登陆VPS"></a>配置免密登陆VPS</h4><p>在Git bash中执行<br><code>ssh-keygen -t rsa -C &quot;email@example.com</code></p><p>默认设置，一路回车，你就会发现<code>~/.ssh</code>目录下多出了两个文件一个私钥文件id_rsa，一个公钥文件id_rsa.pub。我们只要将本地的公钥复制到VPS主机的<code>~/.ss</code>h目录下的<code>~/.ssh/authorized_keys</code>文件中就能免密登陆服务器。</p><figure class="highlight plain"><figcaption><span>git@67.209.***.*** VPS会拒绝连接请求，在.ssh目录下创建config文件来配置一下就能解决这个问题。```</span></figcaption><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">```language</span><br><span class="line">Host 67.209.***.***</span><br><span class="line">HostName 67.209.***.***</span><br><span class="line">User git</span><br><span class="line">Port 26**** # VPS指定的SSH端口</span><br><span class="line">IdentityFile ~/.ssh/id_rsa # 本地的私钥</span><br></pre></td></tr></table></figure><p>配置好后用<code>ssh git@67.209.***.***</code>就能登陆上VPS</p><h4 id="配置git-hooks"><a href="#配置git-hooks" class="headerlink" title="配置git hooks"></a>配置git hooks</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">cd ~</span><br><span class="line">mkdir hexo.git &amp;&amp; cd hexo.git</span><br><span class="line">git init --bare</span><br><span class="line">cd hooks</span><br><span class="line">sudo vim post-receive</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">#!/bin/bash -l</span><br><span class="line">GIT_REPO=/home/git/hexo.git</span><br><span class="line">TMP_GIT_CLONE=/tmp/hexo</span><br><span class="line">PUBLIC_WWW=/var/www/hexo</span><br><span class="line">rm -rf $&#123;TMP_GIT_CLONE&#125;</span><br><span class="line">git clone $GIT_REPO $TMP_GIT_CLONE</span><br><span class="line">rm -rf $&#123;PUBLIC_WWW&#125;/*</span><br><span class="line">cp -rf $&#123;TMP_GIT_CLONE&#125;/* $&#123;PUBLIC_WWW&#125;</span><br></pre></td></tr></table></figure><p>更改脚本权限和/var/www/hexo的权限<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">chmod +x post-receive</span><br><span class="line">sudo chmod 775 -R /var/www/hexo</span><br></pre></td></tr></table></figure></p><h4 id="配置Nginx"><a href="#配置Nginx" class="headerlink" title="配置Nginx"></a>配置Nginx</h4><p><code>vim /etc/nginx/conf.d/hexo.conf</code><br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><span class="line">server &#123;</span><br><span class="line">    listen         80 ;</span><br><span class="line">    root /var/www/hexo;</span><br><span class="line">    server_name www.gamblenull.tech gamblenull.tech;</span><br><span class="line">    access_log  /var/log/nginx/hexo_access.log;</span><br><span class="line">    error_log   /var/log/nginx/hexo_error.log;</span><br><span class="line">    location ~* ^.+\.(ico|gif|jpg|jpeg|png)$ &#123;</span><br><span class="line">            root /var/www/hexo;</span><br><span class="line">            access_log   off;</span><br><span class="line">            expires      1d;</span><br><span class="line">    &#125;</span><br><span class="line">    location ~* ^.+\.(css|js|txt|xml|swf|wav)$ &#123;</span><br><span class="line">        root /var/www/hexo;</span><br><span class="line">        access_log   off;</span><br><span class="line">        expires      10m;</span><br><span class="line">    &#125;</span><br><span class="line">    location / &#123;</span><br><span class="line">        root /var/www/hexo;</span><br><span class="line">        if (-f $request_filename) &#123;</span><br><span class="line">            rewrite ^/(.*)$  /$1 break;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    location /nginx_status &#123;</span><br><span class="line">        stub_status on;</span><br><span class="line">        access_log off;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><h5 id="重启Nginx更新配置"><a href="#重启Nginx更新配置" class="headerlink" title="重启Nginx更新配置"></a>重启Nginx更新配置</h5><p><code>sudo servince nginx restart</code></p><h4 id="配置Hexo"><a href="#配置Hexo" class="headerlink" title="配置Hexo"></a>配置Hexo</h4><p>编辑hexo目录中_config.yml文件中的deploy项<br><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: git@67.209.***.***:/home/git/hexo.git</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">hexo g &amp;&amp; hexo d 生成静态文件并部署到VPS</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;在ubuntu上安装Git，Node-js和Nginx&quot;&gt;&lt;a href=&quot;#在ubuntu上安装Git，Node-js和Nginx&quot; class=&quot;headerlink&quot; title=&quot;在ubuntu上安装Git，Node.js和Nginx&quot;&gt;&lt;/a&gt;在ubuntu上安装Git，Node.js和Nginx&lt;/h4&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get update&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install build-essential&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get install git&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;sudo apt-get innstall nginx&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="web" scheme="http://yoursite.com/categories/web/"/>
    
    
      <category term="VPS" scheme="http://yoursite.com/tags/VPS/"/>
    
  </entry>
  
</feed>
